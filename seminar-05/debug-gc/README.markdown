# GDB

```GDB``` — переносимый отладчик проекта GNU, который работает на многих UNIX-подобных системах и умеет производить отладку 
многих языков программирования, включая ```С/C++```, ```Free Pascal```, ```FreeBASIC```, ```Ada```, ```Fortran```, 
```Python3```, ```Swift```, ```Rust```.

GDB уже установлен на многих UNIX-подобных системах, лёгок в использовании и поддерживает много языков. 
Работа с ним оказывается очень лёгкой, а также его можно подключить к VSCode и другим редакторам кода (Включая Vim, NeoVim (ясное дело), Emacs, Atom и далее).

Для того чтобы нам пройтись по такому файлу нам нужно собрать его с помощью ```g++``` с использованием флага ```-g``` 
(это действительно важно, без этого флага, программа не будет корректно работать в GDB).

```c++
#include <iostream>

void hello() {
  int x = 5;
  int y = -x;
  std::cout << "Hello, outer World "<< y << "!" << std::endl;
}


int main() {
  std::cout << "Hello, World!" << std::endl;
  hello();
}
```

```shell
g++ -g main.cpp -o main
gdb main
```

Командой ```list``` находим номер строчки вхождения в программу (в нашем случае это функция ```main```).  
Далее пишем её порядковый номер с буквой ```b``` (также можно просто указать имя функции ```b main``` тоже работает).  
Запускаем программу с помощью комманды ```r```.  
Для того, чтобы сделать шаг, нужно нажать ```n``` (от слова next).  
Чтобы зайти в функцию нужно сделать "шаг внутрь" (step-in) или просто клавиша ```s```.  
Чтобы узнать какие переменные (локальные) сейчас инициализированны в программе нужно написать комманду ```info locals```.
Чтобы узнать имя переменной: ```print <varname>```.  
Мы можем также изменить переменную с помощью ```set <varname> = <varvalue>```.  
Также, если нужно, можно посмотреть что в данный момент находится в регистрах: ```info registers```.  
Чтобы посмотреть какие в данный момент есть breakpoints (точки останова) нужно написать ```info breakpoints```.  
Чтобы удалить точку останова ```del <breakpoint_num>```.  
Чтобы прыгнуть к следующей точке останова нужно нажать ```c```.  
Мы можем вызывать функции из программы (локальные) с помощью ```call <function_name>(<args>)```.  
Чтобы продолжить выполнение функции и остановить программу когда она (функция) завершится нужно написать ```finish```
или ```fin```, но нельзя использовать ```fin``` в ```main```.  
Чтобы завершить выполнение программы, нужно написать ```kill```.  
Также можно написать ```help``` в любой момент и получить краткую справку, как пользоваться отладчиком.

