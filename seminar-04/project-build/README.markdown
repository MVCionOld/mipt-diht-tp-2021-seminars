# Системы сборки

### Agenda
  * Стадии сборки проекта
  * Инструментарий для сборки
    * сборочные bash-скрипты
    * make
    * cmake
    
# Cтадии сборки проекта

Насколько верно со снобисткой точки зрения фразочки в духе: "программа откомпилировалась без ошибок" или "скомпилируй программу, посмотрим на результат работы"?  
Подсказка: ничего хорошо, они приводят только к путаницы начинающих программистов и говорят об отсутствии компетенции у автора подобных фразочек.
<details><summary>А что тогда говорить?</summary>
<p>
Исходник на C++ — это всего лишь plain text, это значит, что сам по себе он бесполезен, на него можно только глазками посмотреть. 
Поэтому каждый исходный файл требуется скомпилировать в исполняемый файл, динамическую или статическую библиотеки (пытливый читатель
спросит в чем разница между динамической и статической библиотекой — гугл в помощь млм дождитесь АКОСа).  
  
Итак, сами стадии сборки проекта:
  1. Препроцессинг
  2. Компиляция
  3. Ассемблирование
  4. Компоновка (линковка)

**Препроцессинг**  
На данной стадии происходит происходит работа с препроцессорными директивами. Например, препроцессор добавляет хэдеры в код (#include), убирает комментирования, заменяет макросы (#define) их значениями, выбирает нужные куски кода в соответствии с условиями #if, #ifdef и #ifndef.  
```bash
g++ -E -o main.i main.cpp
```

**Компиляция**  
На данной стадии происходит преобразование полученном на прошлом шаге кода без директив в ассемблерный код.
_Ассемблерный код_ — это доступное для понимания человеком представление машинного кода.
```bash
g++ -S -o main.s main.cpp
```

**Ассемблирование**  
На данной стадии необходимо перевести ассемблерный код в машинный с помощью ассемблера.
Ассемблер преобразовывает ассемблерный код в машинный код, сохраняя его в объектном файле. 
_Объектный файл_ — это созданный ассемблером промежуточный файл, хранящий кусок машинного кода. Этот кусок машинного кода, который еще не был связан вместе с другими кусками машинного кода в конечную выполняемую программу, называется объектным кодом.
```bash
g++ -c -o main.o main.cpp
```
или
```bash
as main.s -o main.o
```
**Компоновка**  
На данной стадии происходит связывание всех объектных файлов и статических библиотек в единый исполняемый файл, который мы и сможем запустить в дальнейшем.
```bash
g++ main.o file1.o ... fileN.o lib1.o ... libN.o -o main
```

**\*Загрузка**  
Формально к сборке проекта никакого отношения не имеет, но надо понимать, что для непосредственно
запуска нашего приложения, программу надо загрузить в память. 

</p>
</details>

### Обсудив стадии сборки проекта, заодно мы сразу посмотрели на сборочные bash-скрипты, какие недостатки такого подхода вы сразу можете назвать?



